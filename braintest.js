
const data  = [[5.4,  3.4,  1.7,  0.2,  0.],
[5.1,  3.7,  1.5,  0.4,  0.],
[4.6,  3.6,  1.,  0.2,  0.],
[5.1,  3.3,  1.7,  0.5,  0.],
[4.8,  3.4,  1.9,  0.2,  0.],
[5.,  3.,  1.6,  0.2,  0.],
[5.,  3.4,  1.6,  0.4,  0.],
[5.2,  3.5,  1.5,  0.2,  0.],
[5.2,  3.4,  1.4,  0.2,  0.],
[4.7,  3.2,  1.6,  0.2,  0.],
[4.8,  3.1,  1.6,  0.2,  0.],
[5.4,  3.4,  1.5,  0.4,  0.],
[5.2,  4.1,  1.5,  0.1,  0.],
[5.5,  4.2,  1.4,  0.2,  0.],
[4.9,  3.1,  1.5,  0.1,  0.],
[5.,  3.2,  1.2,  0.2,  0.],
[5.5,  3.5,  1.3,  0.2,  0.],
[4.9,  3.1,  1.5,  0.1,  0.],
[4.4,  3.,  1.3,  0.2,  0.],
[5.1,  3.4,  1.5,  0.2,  0.],
[5.,  3.5,  1.3,  0.3,  0.],
[4.5,  2.3,  1.3,  0.3,  0.],
[4.4,  3.2,  1.3,  0.2,  0.],
[5.,  3.5,  1.6,  0.6,  0.],
[5.1,  3.8,  1.9,  0.4,  0.],
[4.8,  3.,  1.4,  0.3,  0.],
[5.1,  3.8,  1.6,  0.2,  0.],
[4.6,  3.2,  1.4,  0.2,  0.],
[5.3,  3.7,  1.5,  0.2,  0.],
[5.,  3.3,  1.4,  0.2,  0.],
[6.8,  2.8,  4.8,  1.4,  1.],
[6.7,  3.,  5.,  1.7,  1.],
[6.,  2.9,  4.5,  1.5,  1.],
[5.7,  2.6,  3.5,  1.,  1.],
[5.5,  2.4,  3.8,  1.1,  1.],
[5.5,  2.4,  3.7,  1.,  1.],
[5.8,  2.7,  3.9,  1.2,  1.],
[6.,  2.7,  5.1,  1.6,  1.],
[5.4,  3.,  4.5,  1.5,  1.],
[6.,  3.4,  4.5,  1.6,  1.],
[6.7,  3.1,  4.7,  1.5,  1.],
[6.3,  2.3,  4.4,  1.3,  1.],
[5.6,  3.,  4.1,  1.3,  1.],
[5.5,  2.5,  4.,  1.3,  1.],
[5.5,  2.6,  4.4,  1.2,  1.],
[6.1,  3.,  4.6,  1.4,  1.],
[5.8,  2.6,  4.,  1.2,  1.],
[5.,  2.3,  3.3,  1.,  1.],
[5.6,  2.7,  4.2,  1.3,  1.],
[5.7,  3.,  4.2,  1.2,  1.],
[5.7,  2.9,  4.2,  1.3,  1.],
[6.2,  2.9,  4.3,  1.3,  1.],
[5.1,  2.5,  3.,  1.1,  1.],
[5.7,  2.8,  4.1,  1.3,  1.]]

const brain =  require('brain.js')

const config = {
    hiddenLayers: [2,2,2],     // array of ints for the sizes of the hidden layers in the network
    activation: 'sigmoid',  // supported activation types: ['sigmoid', 'relu', 'leaky-relu', 'tanh'],
    learningRate: 0.2,
};

// create a simple feed forward neural network with backpropagation
const net = new brain.NeuralNetwork(config);


let proData = []

data.forEach(element => {
    proData.push({
        input:element.slice(0,4),
        output: [element[4]]
    })
});



net.train(proData);

console.log(net.run([4.9,  3.1,  1.5,  0.1  ]));
console.log(net.run([5.,  3.3,  1.4,  0.2  ]));
console.log(net.run([5.8,  2.6,  4.,  1.2  ]));
console.log(net.run([5.7,  2.8,  4.1,  1.3 ]));


